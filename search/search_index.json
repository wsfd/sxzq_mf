{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4ecb\u7ecd \u672c\u6846\u67b6\u4e3a\u4e00\u4e2a\u7b80\u5355\u3001\u5165\u95e8\u7ea7\u7684\u591a\u56e0\u5b50\u6a21\u677f\uff0c\u65e8\u5728\u65b9\u4fbf\u5b9e\u4e60\u751f\u5feb\u901f\u4e0a\u624b\u91cf\u5316\u56e0\u5b50\u65b9\u9762\u7684\u7814\u7a76\uff0c\u51cf\u5c11\u5728\u6570\u636e\u5904\u7406\u3001\u56de\u6d4b\u6a21\u677f\u7b49\u57fa\u7840\u5de5\u5177\u4e0a\u7684\u5de5\u4f5c\u91cf\u3002 \u4e3b\u8981\u5305\u542b\u57fa\u7840 \u6570\u636e\u6846\u67b6 \u3001 \u56e0\u5b50\u5904\u7406 \u3001 \u56e0\u5b50\u68c0\u6d4b \u548c \u7ec4\u5408\u5206\u6790 \u7b49\u6a21\u5757\u548c\u90e8\u5206\u91cf\u5316\u7814\u7a76\u5e38\u7528\u51fd\u6570\u3002 \u7ed3\u6784 \u6570\u636e\u6846\u67b6 - \u5305\u62ec\u4e2a\u80a1\u884c\u60c5\u6570\u636e\u8c03\u7528\u548c\u56e0\u5b50\u6570\u636e\u7684\u5b58\u50a8\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u6846\u67b6\u7b49\u3002 \u56e0\u5b50\u5904\u7406 - \u57fa\u672c\u7684\u56e0\u5b50\u5904\u7406\u65b9\u6cd5\uff0c\u5982\u6807\u51c6\u5316\u3001\u4e2d\u6027\u5316\u3001\u7f3a\u5931\u503c\u586b\u5145\u7b49\u3002 \u56e0\u5b50\u68c0\u6d4b - \u56e0\u5b50\u9009\u80a1\u6548\u679c\u7684\u8861\u91cf\u65b9\u5f0f\uff0c\u5982\u5206\u7ec4\u56de\u6d4b\u3001\u5355\u8fb9\u56de\u6d4b\u7b49\u3002 \u7ec4\u5408\u5206\u6790 - \u4e3b\u8981\u5305\u62ec\u4e0d\u540c\u65b9\u5f0f\u7684\u56e0\u5b50\u7ec4\u5408\u7684\u98ce\u683c\u66b4\u9732\u4e0e\u6536\u76ca\u5f52\u56e0\u5206\u6790\u7b49\u3002 \u914d\u7f6e Anaconda 3.6+ h5py 2.7.1 talib 0.4.17 uqer 1.3.1 import mf #\u5bfc\u5165\u6846\u67b6","title":"Home"},{"location":"#_1","text":"\u672c\u6846\u67b6\u4e3a\u4e00\u4e2a\u7b80\u5355\u3001\u5165\u95e8\u7ea7\u7684\u591a\u56e0\u5b50\u6a21\u677f\uff0c\u65e8\u5728\u65b9\u4fbf\u5b9e\u4e60\u751f\u5feb\u901f\u4e0a\u624b\u91cf\u5316\u56e0\u5b50\u65b9\u9762\u7684\u7814\u7a76\uff0c\u51cf\u5c11\u5728\u6570\u636e\u5904\u7406\u3001\u56de\u6d4b\u6a21\u677f\u7b49\u57fa\u7840\u5de5\u5177\u4e0a\u7684\u5de5\u4f5c\u91cf\u3002 \u4e3b\u8981\u5305\u542b\u57fa\u7840 \u6570\u636e\u6846\u67b6 \u3001 \u56e0\u5b50\u5904\u7406 \u3001 \u56e0\u5b50\u68c0\u6d4b \u548c \u7ec4\u5408\u5206\u6790 \u7b49\u6a21\u5757\u548c\u90e8\u5206\u91cf\u5316\u7814\u7a76\u5e38\u7528\u51fd\u6570\u3002","title":"\u4ecb\u7ecd"},{"location":"#_2","text":"\u6570\u636e\u6846\u67b6 - \u5305\u62ec\u4e2a\u80a1\u884c\u60c5\u6570\u636e\u8c03\u7528\u548c\u56e0\u5b50\u6570\u636e\u7684\u5b58\u50a8\u3001\u8bfb\u53d6\u3001\u66f4\u65b0\u6846\u67b6\u7b49\u3002 \u56e0\u5b50\u5904\u7406 - \u57fa\u672c\u7684\u56e0\u5b50\u5904\u7406\u65b9\u6cd5\uff0c\u5982\u6807\u51c6\u5316\u3001\u4e2d\u6027\u5316\u3001\u7f3a\u5931\u503c\u586b\u5145\u7b49\u3002 \u56e0\u5b50\u68c0\u6d4b - \u56e0\u5b50\u9009\u80a1\u6548\u679c\u7684\u8861\u91cf\u65b9\u5f0f\uff0c\u5982\u5206\u7ec4\u56de\u6d4b\u3001\u5355\u8fb9\u56de\u6d4b\u7b49\u3002 \u7ec4\u5408\u5206\u6790 - \u4e3b\u8981\u5305\u62ec\u4e0d\u540c\u65b9\u5f0f\u7684\u56e0\u5b50\u7ec4\u5408\u7684\u98ce\u683c\u66b4\u9732\u4e0e\u6536\u76ca\u5f52\u56e0\u5206\u6790\u7b49\u3002","title":"\u7ed3\u6784"},{"location":"#_3","text":"Anaconda 3.6+ h5py 2.7.1 talib 0.4.17 uqer 1.3.1 import mf #\u5bfc\u5165\u6846\u67b6","title":"\u914d\u7f6e"},{"location":"_\u57fa\u7840\u6570\u636e/","text":"\u6570\u636e\u4e3b\u8981\u5305\u62ec \u884c\u60c5\u6570\u636e \u3001 \u56e0\u5b50\u6570\u636e \u548c\u90e8\u5206 \u5e38\u7528\u6570\u636e \uff0c\u90fd\u5df2 hdf5 \u7684\u683c\u5f0f\u8fdb\u884c\u4fdd\u5b58\uff0c\u4ee5 pandas.DataFrame \u7684\u683c\u5f0f\u8fdb\u884c\u5904\u7406\u3002 HDF5 \u4f5c\u4e3a\u6570\u636e\u7684\u57fa\u7840\u5b58\u50a8\u683c\u5f0f\uff0cHDF5 \u62e5\u6709\u4e00\u7cfb\u5217\u7684\u4f18\u5f02\u7279\u6027\uff0c\u4f7f\u5176\u7279\u522b\u9002\u5408\u8fdb\u884c\u5927\u91cf\u79d1\u5b66\u6570\u636e\u7684\u5b58\u50a8\u548c\u64cd\u4f5c\uff0c\u5982\u5b83\u652f\u6301\u975e\u5e38\u591a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7075\u6d3b\uff0c\u901a\u7528\uff0c\u8de8\u5e73\u53f0\uff0c\u53ef\u6269\u5c55\uff0c\u9ad8\u6548\u7684 I/O \u6027\u80fd\uff0c\u652f\u6301\u51e0\u4e4e\u65e0\u9650\u91cf\uff08\u9ad8\u8fbe EB\uff09\u7684\u5355\u6587\u4ef6\u5b58\u50a8\u7b49\u3002 \u4e2a\u80a1\u884c\u60c5\u6570\u636e \u4e2a\u80a1\u884c\u60c5\u6570\u636e\u4e3b\u8981\u5305\u62ec \u9ad8\u3001\u5f00\u3001\u4f4e\u3001\u6536\u3001\u6210\u4ea4\u91cf\u3001\u6210\u4ea4\u91d1\u989d\u3001\u662f\u5426\u505c\u724c\u7b49 \u4fe1\u606f\uff0c\u4ef7\u683c\u4e3a\u540e\u590d\u6743\u4ef7\u683c\uff0c\u6570\u636e\u4e2d\u5305\u62ec\u4e86\u590d\u6743\u7cfb\u6570\uff0c Index \u4e3a\u4ea4\u6613\u65e5\u3002 def fetch_stock_data(code,items='all',is_trade=True,cut = 60) \u53c2\u6570\uff1a code: \u2003\u4e2a\u80a1\u4ee3\u7801\uff0cstr items: \u2003\u884c\u60c5\u6307\u6807\uff0c\u9ed8\u8ba4\u5168\u90e8\u8bfb\u53d6\uff0cstr is_trade: \u2003\u662f\u5426\u8fc7\u6ee4\u505c\u724c\u65e5\u884c\u60c5\uff0c\u9ed8\u8ba4\u8fc7\u6ee4\uff0cbool cut: \u2003\u662f\u5426\u8fc7\u6ee4\u4e0a\u5e02\u524dN\u65e5\u884c\u60c5\uff0c\u9ed8\u8ba4\u4e0d\u53d6\u524d60\u65e5\u884c\u60c5\uff0cint \u793a\u4f8b\uff1a mf.fetch_stock_data('000001').head() return \u56e0\u5b50\u6570\u636e \u56e0\u5b50\u6570\u636e\u6a2a\u8f74\u4e3a\u4ea4\u6613\u65e5\uff0c\u7eb5\u8f74\u5305\u62ec\u4e86\u6570\u636e\u8d77\u59cb\u65e5\u81f3\u5230\u6700\u540e\u4e00\u65e5\u7684\u6240\u6709\u5386\u53f2\u4e0a\u5e02\u4ea4\u6613\u4e2a\u80a1\u8bc1\u5238\u4ee3\u7801\uff0c\u65e5\u671f\u683c\u5f0f\u4e3a %Y-%m-%d ,\u8bc1\u5238\u4ee3\u7801\u4e3a\u516d\u4f4d\u5b57\u7b26\u4e32\u3002\u5176\u4e2d\uff0c\u4e2a\u80a1\u672a\u4e0a\u5e02\u65e5\u671f\uff0c\u505c\u724c\u65e5\u671f\uff0c\u9000\u5e02\u65e5\u671f\u7684\u56e0\u5b50\u503c\u4e3aNaN\u503c\u3002 \u4e00\u822c\u5efa\u8bae\u4fdd\u7559\u56e0\u5b50\u539f\u59cb\u6570\u636e\uff0c\u518d\u53e6\u884c\u4fdd\u5b58\u6807\u51c6\u5316\u6216\u8005\u4e2d\u6027\u5316\u4e4b\u540e\u7684\u56e0\u5b50\u6570\u636e\u3002 \u8bfb\u53d6\uff1a def read_hdf5_base(name,path='\u56e0\u5b50\u6570\u636e'): # \u8def\u5f84\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u672c\u5730\u60c5\u51b5\u8c03\u6574 \u4fdd\u5b58\uff1a class hdf5(self): def save_base_hdf5(self,name,describes,path,source): ''' \u793a\u4f8b\uff1a '''\u4fdd\u5b58\u6570\u636e''' df = mf.hdf5(PB) df.base_hdf5('PB',describes='PB\uff0cftp\u6570\u636e\uff0c\u505c\u724c\u65e5\u4e3aNaN,\u5254\u9664\u524d60\u65e5',types='\u56e0\u5b50\u6570\u636e',source='ftp\u6570\u636e') '''\u8bfb\u53d6\u6570\u636e''' PB = mf.read_hdf5_base('PB') PB.head() \u57fa\u7840\u6570\u636e \u56e0\u5b50\u7814\u7a76\u4e2d\u5e38\u7528\u7684\u57fa\u7840\u6570\u636e\uff0c\u5305\u62ec\u5168\u90e8\u5386\u53f2\u80a1\u7968\u4ee3\u7801\uff0c\u5386\u53f2\u4ea4\u6613\u65e5\uff0c\u4e2a\u80a1\u65e5\u6536\u76ca\u7387\u77e9\u9635\uff0c\u80a1\u7968\u505c\u724c\u548cST\u4fe1\u606f\u7b49\u7b49\uff0c\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 mf.code_list #\u5168\u90e8\u80a1\u7968\u4ee3\u7801\uff0clist mf.index_dates #\u4ea4\u6613\u65e5\uff0clist mf.rets_all #\u4e2a\u80a1\u65e5\u6536\u76ca\u6570\u636e mf.opens #\u4e2a\u80a1\u5f00\u76d8\u4ef7\u6570\u636e mf.closes #\u4e2a\u80a1\u6536\u76d8\u4ef7\u6570\u636e mf.trade_info #\u4e2a\u80a1\u505c\u724c\u4fe1\u606f mf.ST #ST\u4fe1\u606f","title":" \u57fa\u7840\u6570\u636e"},{"location":"_\u57fa\u7840\u6570\u636e/#_1","text":"\u4e2a\u80a1\u884c\u60c5\u6570\u636e\u4e3b\u8981\u5305\u62ec \u9ad8\u3001\u5f00\u3001\u4f4e\u3001\u6536\u3001\u6210\u4ea4\u91cf\u3001\u6210\u4ea4\u91d1\u989d\u3001\u662f\u5426\u505c\u724c\u7b49 \u4fe1\u606f\uff0c\u4ef7\u683c\u4e3a\u540e\u590d\u6743\u4ef7\u683c\uff0c\u6570\u636e\u4e2d\u5305\u62ec\u4e86\u590d\u6743\u7cfb\u6570\uff0c Index \u4e3a\u4ea4\u6613\u65e5\u3002 def fetch_stock_data(code,items='all',is_trade=True,cut = 60) \u53c2\u6570\uff1a code: \u2003\u4e2a\u80a1\u4ee3\u7801\uff0cstr items: \u2003\u884c\u60c5\u6307\u6807\uff0c\u9ed8\u8ba4\u5168\u90e8\u8bfb\u53d6\uff0cstr is_trade: \u2003\u662f\u5426\u8fc7\u6ee4\u505c\u724c\u65e5\u884c\u60c5\uff0c\u9ed8\u8ba4\u8fc7\u6ee4\uff0cbool cut: \u2003\u662f\u5426\u8fc7\u6ee4\u4e0a\u5e02\u524dN\u65e5\u884c\u60c5\uff0c\u9ed8\u8ba4\u4e0d\u53d6\u524d60\u65e5\u884c\u60c5\uff0cint \u793a\u4f8b\uff1a mf.fetch_stock_data('000001').head() return","title":"\u4e2a\u80a1\u884c\u60c5\u6570\u636e"},{"location":"_\u57fa\u7840\u6570\u636e/#_2","text":"\u56e0\u5b50\u6570\u636e\u6a2a\u8f74\u4e3a\u4ea4\u6613\u65e5\uff0c\u7eb5\u8f74\u5305\u62ec\u4e86\u6570\u636e\u8d77\u59cb\u65e5\u81f3\u5230\u6700\u540e\u4e00\u65e5\u7684\u6240\u6709\u5386\u53f2\u4e0a\u5e02\u4ea4\u6613\u4e2a\u80a1\u8bc1\u5238\u4ee3\u7801\uff0c\u65e5\u671f\u683c\u5f0f\u4e3a %Y-%m-%d ,\u8bc1\u5238\u4ee3\u7801\u4e3a\u516d\u4f4d\u5b57\u7b26\u4e32\u3002\u5176\u4e2d\uff0c\u4e2a\u80a1\u672a\u4e0a\u5e02\u65e5\u671f\uff0c\u505c\u724c\u65e5\u671f\uff0c\u9000\u5e02\u65e5\u671f\u7684\u56e0\u5b50\u503c\u4e3aNaN\u503c\u3002 \u4e00\u822c\u5efa\u8bae\u4fdd\u7559\u56e0\u5b50\u539f\u59cb\u6570\u636e\uff0c\u518d\u53e6\u884c\u4fdd\u5b58\u6807\u51c6\u5316\u6216\u8005\u4e2d\u6027\u5316\u4e4b\u540e\u7684\u56e0\u5b50\u6570\u636e\u3002 \u8bfb\u53d6\uff1a def read_hdf5_base(name,path='\u56e0\u5b50\u6570\u636e'): # \u8def\u5f84\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u672c\u5730\u60c5\u51b5\u8c03\u6574 \u4fdd\u5b58\uff1a class hdf5(self): def save_base_hdf5(self,name,describes,path,source): ''' \u793a\u4f8b\uff1a '''\u4fdd\u5b58\u6570\u636e''' df = mf.hdf5(PB) df.base_hdf5('PB',describes='PB\uff0cftp\u6570\u636e\uff0c\u505c\u724c\u65e5\u4e3aNaN,\u5254\u9664\u524d60\u65e5',types='\u56e0\u5b50\u6570\u636e',source='ftp\u6570\u636e') '''\u8bfb\u53d6\u6570\u636e''' PB = mf.read_hdf5_base('PB') PB.head()","title":"\u56e0\u5b50\u6570\u636e"},{"location":"_\u57fa\u7840\u6570\u636e/#_3","text":"\u56e0\u5b50\u7814\u7a76\u4e2d\u5e38\u7528\u7684\u57fa\u7840\u6570\u636e\uff0c\u5305\u62ec\u5168\u90e8\u5386\u53f2\u80a1\u7968\u4ee3\u7801\uff0c\u5386\u53f2\u4ea4\u6613\u65e5\uff0c\u4e2a\u80a1\u65e5\u6536\u76ca\u7387\u77e9\u9635\uff0c\u80a1\u7968\u505c\u724c\u548cST\u4fe1\u606f\u7b49\u7b49\uff0c\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 mf.code_list #\u5168\u90e8\u80a1\u7968\u4ee3\u7801\uff0clist mf.index_dates #\u4ea4\u6613\u65e5\uff0clist mf.rets_all #\u4e2a\u80a1\u65e5\u6536\u76ca\u6570\u636e mf.opens #\u4e2a\u80a1\u5f00\u76d8\u4ef7\u6570\u636e mf.closes #\u4e2a\u80a1\u6536\u76d8\u4ef7\u6570\u636e mf.trade_info #\u4e2a\u80a1\u505c\u724c\u4fe1\u606f mf.ST #ST\u4fe1\u606f","title":"\u57fa\u7840\u6570\u636e"},{"location":"\u56e0\u5b50\u5904\u7406/","text":"\u7f3a\u5931\u503c\u586b\u8865 \u90e8\u5206\u56e0\u5b50\u53ef\u80fd\u5404\u79cd\u539f\u56e0\u5bfc\u81f4\u7f3a\u5931\u6570\u636e\u8f83\u591a\uff0c\u4e0e\u5176\u4ed6\u56e0\u5b50\u5408\u6210\u52a0\u6743\u65f6\u5c31\u4f1a\u7f3a\u5931\u5f88\u591a\u80a1\u7968\u4fe1\u606f\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u5408\u7406\u586b\u5145\u3002 \u5411\u524d\u586b\u5145\uff1a PB = mf.read_hdf5_base('PB') PB = PB.T.ffill().T \u884c\u4e1a\u5747\u503c\u586b\u5145\uff1a def ind_mean_filled(factor): ... PB_ind_mean_filled = ind_mean_filled(PB) \u6807\u51c6\u5316 \u5404\u7c7b\u56e0\u5b50\u6570\u636e\u91cf\u7ea7\u4e0d\u4e00\uff0c\u5728\u5408\u6210\u6216\u8005\u4e2d\u6027\u5316\u524d\u9700\u8981\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u622a\u9762\u7684\u6807\u51c6\u5316\u3002 \u5177\u4f53\u65b9\u6cd5\u4e3a\uff0c\u4ee5\u622a\u9762\u4e2d\u4f4d\u6570+/-N\u500d\u6807\u51c6\u5dee\u4e3a\u9608\u503c\uff0c\u8c03\u6574\u6781\u7aef\u6570\u636e\uff0c\u4e4b\u540e\u518d\u5bf9\u6570\u636e\u51cf\u53bb\u5747\u503c\u3001\u5904\u4ee5\u6807\u51c6\u5dee\u8fdb\u884c\u6807\u51c6\u5316 def median_clean(factor,omega = 3): ... PB_zscore = median_clean(PB) \u4e2d\u6027\u5316 \u622a\u9762\u4ee5\u56e0\u5b50\u503c\u5bf9\u4e2d\u6027\u5316\u6307\u6807\u505a\u56de\u5f52\uff0c\u53d6\u6b8b\u5dee\uff0c\u4f5c\u4e3a\u4e2d\u6027\u5316\u540e\u7684\u56e0\u5b50\u503c\u3002 \u4e2d\u6027\u5316\u65b9\u6cd5\u4e2d\u53ef\u8c03\u7528\u7684 function \u4e3b\u8981\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u662f\u56fa\u5b9a\u7684\u76f8\u5bf9\u884c\u4e1a\u5e02\u503c\u7684\u4e2d\u6027\u5316\uff0c\u4e8c\u662f\u53ef\u4ee5\u76f8\u5bf9\u4efb\u610f\u591a\u56e0\u5b50\u6570\u636e\u7684\u4e2d\u6027\u5316\uff0c\u53ef\u81ea\u7531\u5b9a\u5236\u3002 Netural\uff1a class netural(object): def __init__(self): self.styles = None self.f = {} def mkv_netural(self,factor,inds=True): ... def custom_netural(self,factor_y,factor_x,inds=True): ''' \u5efa\u8bae\u7528\u6807\u51c6\u5316\u540e\u7684\u6570\u636e ''' ... \u793a\u4f8b nl = netural() nl.init() # \u540c\u65f6\u5bf9\u884c\u4e1a\u5e02\u503c\u8fdb\u884c\u4e2d\u6027\u5316 PB_mkv_ind_nl = nl.mkv_netural(PB) # \u4ec5\u5bf9\u5e02\u503c\u8fdb\u884c\u4e2d\u6027\u5316 PB_mkv_nl = nl.mkv_netural(PB,inds = False) # \u5bf9\u7279\u5b9a\u56e0\u5b50\u8fdb\u884c\u4e2d\u6027\u5316 roc = mf.read_hdf5_base('roc60') roc = median_clean(roc) mkv = mf.read_hdf5_base('mkv','ftp\u56e0\u5b50\u6570\u636e') mkv = mkv[mkv>0] mkv = mkv.applymap(lambda x:math.log(x,math.e)) mkv = mkv.applymap(lambda x:math.nan if math.isinf(x) else x) factor_x = [mkv,roc] PB_nl = nl.custom_netural(PB,factor_x,inds = True)rue","title":"\u56e0\u5b50\u5904\u7406"},{"location":"\u56e0\u5b50\u5904\u7406/#_1","text":"\u90e8\u5206\u56e0\u5b50\u53ef\u80fd\u5404\u79cd\u539f\u56e0\u5bfc\u81f4\u7f3a\u5931\u6570\u636e\u8f83\u591a\uff0c\u4e0e\u5176\u4ed6\u56e0\u5b50\u5408\u6210\u52a0\u6743\u65f6\u5c31\u4f1a\u7f3a\u5931\u5f88\u591a\u80a1\u7968\u4fe1\u606f\uff0c\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u5408\u7406\u586b\u5145\u3002 \u5411\u524d\u586b\u5145\uff1a PB = mf.read_hdf5_base('PB') PB = PB.T.ffill().T \u884c\u4e1a\u5747\u503c\u586b\u5145\uff1a def ind_mean_filled(factor): ... PB_ind_mean_filled = ind_mean_filled(PB)","title":"\u7f3a\u5931\u503c\u586b\u8865"},{"location":"\u56e0\u5b50\u5904\u7406/#_2","text":"\u5404\u7c7b\u56e0\u5b50\u6570\u636e\u91cf\u7ea7\u4e0d\u4e00\uff0c\u5728\u5408\u6210\u6216\u8005\u4e2d\u6027\u5316\u524d\u9700\u8981\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u622a\u9762\u7684\u6807\u51c6\u5316\u3002 \u5177\u4f53\u65b9\u6cd5\u4e3a\uff0c\u4ee5\u622a\u9762\u4e2d\u4f4d\u6570+/-N\u500d\u6807\u51c6\u5dee\u4e3a\u9608\u503c\uff0c\u8c03\u6574\u6781\u7aef\u6570\u636e\uff0c\u4e4b\u540e\u518d\u5bf9\u6570\u636e\u51cf\u53bb\u5747\u503c\u3001\u5904\u4ee5\u6807\u51c6\u5dee\u8fdb\u884c\u6807\u51c6\u5316 def median_clean(factor,omega = 3): ... PB_zscore = median_clean(PB)","title":"\u6807\u51c6\u5316"},{"location":"\u56e0\u5b50\u5904\u7406/#_3","text":"\u622a\u9762\u4ee5\u56e0\u5b50\u503c\u5bf9\u4e2d\u6027\u5316\u6307\u6807\u505a\u56de\u5f52\uff0c\u53d6\u6b8b\u5dee\uff0c\u4f5c\u4e3a\u4e2d\u6027\u5316\u540e\u7684\u56e0\u5b50\u503c\u3002 \u4e2d\u6027\u5316\u65b9\u6cd5\u4e2d\u53ef\u8c03\u7528\u7684 function \u4e3b\u8981\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u662f\u56fa\u5b9a\u7684\u76f8\u5bf9\u884c\u4e1a\u5e02\u503c\u7684\u4e2d\u6027\u5316\uff0c\u4e8c\u662f\u53ef\u4ee5\u76f8\u5bf9\u4efb\u610f\u591a\u56e0\u5b50\u6570\u636e\u7684\u4e2d\u6027\u5316\uff0c\u53ef\u81ea\u7531\u5b9a\u5236\u3002 Netural\uff1a class netural(object): def __init__(self): self.styles = None self.f = {} def mkv_netural(self,factor,inds=True): ... def custom_netural(self,factor_y,factor_x,inds=True): ''' \u5efa\u8bae\u7528\u6807\u51c6\u5316\u540e\u7684\u6570\u636e ''' ... \u793a\u4f8b nl = netural() nl.init() # \u540c\u65f6\u5bf9\u884c\u4e1a\u5e02\u503c\u8fdb\u884c\u4e2d\u6027\u5316 PB_mkv_ind_nl = nl.mkv_netural(PB) # \u4ec5\u5bf9\u5e02\u503c\u8fdb\u884c\u4e2d\u6027\u5316 PB_mkv_nl = nl.mkv_netural(PB,inds = False) # \u5bf9\u7279\u5b9a\u56e0\u5b50\u8fdb\u884c\u4e2d\u6027\u5316 roc = mf.read_hdf5_base('roc60') roc = median_clean(roc) mkv = mf.read_hdf5_base('mkv','ftp\u56e0\u5b50\u6570\u636e') mkv = mkv[mkv>0] mkv = mkv.applymap(lambda x:math.log(x,math.e)) mkv = mkv.applymap(lambda x:math.nan if math.isinf(x) else x) factor_x = [mkv,roc] PB_nl = nl.custom_netural(PB,factor_x,inds = True)rue","title":"\u4e2d\u6027\u5316"},{"location":"\u56e0\u5b50\u68c0\u6d4b/","text":"\u4fe1\u606f\u7cfb\u6570 \u5373\u4e2a\u80a1\u56e0\u5b50\u503c\u4e0e\u4e2a\u80a1\u672a\u6765\u4e00\u671f\u6536\u76ca\u7387\u7684\u622a\u9762\u76f8\u5173\u7cfb\u6570\u3002 ic = mf.cal_ic(PB) rank_ic = mf.cal_ic_rank(PB) mf.draw_IC(ic) \u5206\u7ec4\u56de\u6d4b \u6309\u56e0\u5b50\u503c\u5c06\u5e02\u573a\u6240\u4ee5\u4e2a\u80a1\u5206\u4e3a10\u7ec4\u7b49\u6743\u7ec4\u5408\uff0c\u56de\u6d4b\u6bcf\u7ec4\u6536\u76ca\uff0c\u89c2\u5bdf\u56e0\u5b50\u7684\u5355\u8c03\u6027 def group_test(factor,num = 10,period = 20): ... res = mf.group_test(PB,num = 10,period = 20) \u5355\u8fb9\u56de\u6d4b \u793a\u4f8b\uff1a def run(factor,types='t-close',positions=100,period=20,ascending=True,fees=0.002,group_num=10,all='long',holding_types='normal',draw=True,bench='all'): ''' factor - \u56e0\u5b50\u503c\u77e9\u9635 positions - \u6301\u80a1\u6570\uff0cint period - \u6362\u4ed3\u5468\u671f\uff0cint fees - \u624b\u7eed\u8d39 draw - \u7ed8\u56fe\uff0cbool bench - \u57fa\u51c6\uff0call/HS300/ZZ500 ''' r = mf.run(-ma,period=10,fees=0.002,positions=100) \u7eaf\u56e0\u5b50\u6536\u76ca pure_spread_ret = mf.pure_ret(ma,period=20)","title":"\u56e0\u5b50\u68c0\u6d4b"},{"location":"\u56e0\u5b50\u68c0\u6d4b/#_1","text":"\u5373\u4e2a\u80a1\u56e0\u5b50\u503c\u4e0e\u4e2a\u80a1\u672a\u6765\u4e00\u671f\u6536\u76ca\u7387\u7684\u622a\u9762\u76f8\u5173\u7cfb\u6570\u3002 ic = mf.cal_ic(PB) rank_ic = mf.cal_ic_rank(PB) mf.draw_IC(ic)","title":"\u4fe1\u606f\u7cfb\u6570"},{"location":"\u56e0\u5b50\u68c0\u6d4b/#_2","text":"\u6309\u56e0\u5b50\u503c\u5c06\u5e02\u573a\u6240\u4ee5\u4e2a\u80a1\u5206\u4e3a10\u7ec4\u7b49\u6743\u7ec4\u5408\uff0c\u56de\u6d4b\u6bcf\u7ec4\u6536\u76ca\uff0c\u89c2\u5bdf\u56e0\u5b50\u7684\u5355\u8c03\u6027 def group_test(factor,num = 10,period = 20): ... res = mf.group_test(PB,num = 10,period = 20)","title":"\u5206\u7ec4\u56de\u6d4b"},{"location":"\u56e0\u5b50\u68c0\u6d4b/#_3","text":"\u793a\u4f8b\uff1a def run(factor,types='t-close',positions=100,period=20,ascending=True,fees=0.002,group_num=10,all='long',holding_types='normal',draw=True,bench='all'): ''' factor - \u56e0\u5b50\u503c\u77e9\u9635 positions - \u6301\u80a1\u6570\uff0cint period - \u6362\u4ed3\u5468\u671f\uff0cint fees - \u624b\u7eed\u8d39 draw - \u7ed8\u56fe\uff0cbool bench - \u57fa\u51c6\uff0call/HS300/ZZ500 ''' r = mf.run(-ma,period=10,fees=0.002,positions=100)","title":"\u5355\u8fb9\u56de\u6d4b"},{"location":"\u56e0\u5b50\u68c0\u6d4b/#_4","text":"pure_spread_ret = mf.pure_ret(ma,period=20)","title":"\u7eaf\u56e0\u5b50\u6536\u76ca"},{"location":"\u5e38\u7528\u51fd\u6570/","text":"\u4e00\u4e9b\u6570\u636e\u5206\u6790\u4e2d\u53ef\u80fd\u4f1a\u5e38\u7528\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002 dict-list \u8f6c\u6362 \u53ef\u4ee5\u5c06dict\u7684key\u548cvalue\u4e92\u6362\uff0c\u4e92\u6362\u540e\u91cd\u590d\u7684key\u4ee5list\u5f62\u5f0f\u4fdd\u5b58 def trans_dict(dicts): s = {} values = list(dicts.values()) keys = list(dicts.keys()) values_types = list(set(values)) for i in values_types: s[i] = [] for i in range(len(values)): s[values[i]].append(keys[i]) return s \u79fb\u52a8\u7a97\u53e3\u751f\u6210 \u8f93\u5165\u4e00\u4e2aN\u4e2a\u5143\u7d20\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u6309\u6bcfM\u4e2a\u5143\u7d20\u4e00\u7ec4\uff0c\u6bcf\u7ec4\u5728\u4f4d\u5e8f\u4e0a\u5411\u540e\u5e73\u79fb\u4e00\u4f4d,\u8f93\u51faN-M+1\u7ec4list def rolling_window(a, window): shape = a.shape[:-1] + (a.shape[-1] - window + 1, window) strides = a.strides + (a.strides[-1],) return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides) \u53c2\u6570\u5bfb\u4f18 from hyperopt import hp,partial,Trials,STATUS_OK from hyperopt import fmin, tpe # \u81ea\u5b9a\u4e49\u76ee\u6807\u51fd\u6570 def test_p(): ... # \u53c2\u6570\u7a7a\u95f4 space = { } for i in selects: space[i] = hp.quniform(i, 0, 1, 0.25) # \u5f00\u59cb\u8fed\u4ee3 trials = Trials() algo = partial(tpe.suggest,n_startup_jobs=20) best_p = fmin(test_p,space,algo=algo,max_evals = 720, trials=trials)","title":"\u5e38\u7528\u51fd\u6570"},{"location":"\u5e38\u7528\u51fd\u6570/#dict-list","text":"\u53ef\u4ee5\u5c06dict\u7684key\u548cvalue\u4e92\u6362\uff0c\u4e92\u6362\u540e\u91cd\u590d\u7684key\u4ee5list\u5f62\u5f0f\u4fdd\u5b58 def trans_dict(dicts): s = {} values = list(dicts.values()) keys = list(dicts.keys()) values_types = list(set(values)) for i in values_types: s[i] = [] for i in range(len(values)): s[values[i]].append(keys[i]) return s","title":"dict-list \u8f6c\u6362"},{"location":"\u5e38\u7528\u51fd\u6570/#_1","text":"\u8f93\u5165\u4e00\u4e2aN\u4e2a\u5143\u7d20\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u6309\u6bcfM\u4e2a\u5143\u7d20\u4e00\u7ec4\uff0c\u6bcf\u7ec4\u5728\u4f4d\u5e8f\u4e0a\u5411\u540e\u5e73\u79fb\u4e00\u4f4d,\u8f93\u51faN-M+1\u7ec4list def rolling_window(a, window): shape = a.shape[:-1] + (a.shape[-1] - window + 1, window) strides = a.strides + (a.strides[-1],) return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)","title":"\u79fb\u52a8\u7a97\u53e3\u751f\u6210"},{"location":"\u5e38\u7528\u51fd\u6570/#_2","text":"from hyperopt import hp,partial,Trials,STATUS_OK from hyperopt import fmin, tpe # \u81ea\u5b9a\u4e49\u76ee\u6807\u51fd\u6570 def test_p(): ... # \u53c2\u6570\u7a7a\u95f4 space = { } for i in selects: space[i] = hp.quniform(i, 0, 1, 0.25) # \u5f00\u59cb\u8fed\u4ee3 trials = Trials() algo = partial(tpe.suggest,n_startup_jobs=20) best_p = fmin(test_p,space,algo=algo,max_evals = 720, trials=trials)","title":"\u53c2\u6570\u5bfb\u4f18"},{"location":"\u7ec4\u5408\u5206\u6790/","text":"\u98ce\u683c\u66b4\u9732\u5206\u6790 \u53ef\u81ea\u884c\u914d\u7f6e\u98ce\u683c\u56e0\u5b50\uff0c\u8fd9\u91cc\u4ec5\u4ee5\u5e02\u503c\u3001\u53cd\u8f6c\u7b49\u56e0\u5b50\u4f5c\u4e3a\u98ce\u683c\u56e0\u5b50\u793a\u4f8b\u51fd\u6570\u7528\u6cd5 class style_analysis(object): def __init__(self,styles = ['mkv','roc60','PE','PB','roe']): self.styles = styles def update_style(self): ss = {} for i in self.styles: print(i) ss[i] = read_hdf5_base(i) if i == 'mkv': ss[i] = ss[i].applymap(lambda x:math.log(x,math.e)) ss[i] = median_clean(ss[i]) self.ss = ss def cal_style_exposure(self,holdings): s = {} for i in sorted(holdings[0].keys()): h = holdings[0][i] style = [self.ss[n][i] for n in self.styles] style = pd.DataFrame(style,index = self.styles).T s[i] = style[style.index.isin(h)].mean() return pd.DataFrame(s) #\u52a0\u8f7d\u98ce\u683c\u56e0\u5b50\u6570\u636e\uff0c\u9700\u8981\u8fdb\u884c\u6807\u51c6\u5316\uff0c\u5efa\u8bae\u9884\u50a8\u5b58\u6807\u51c6\u5316\u56e0\u5b50\u6570\u636e sp = mf.style_analysis() sp.update_style() ILLIQ = mf.read_hdf5_base('ILLIQ') r = mf.run(ILLIQ,period=10,fees=0.002,positions=100) exposure = sp.cal_style_exposure(r[1]) \u6536\u76ca\u5f52\u56e0 ...","title":"\u7ec4\u5408\u5206\u6790"},{"location":"\u7ec4\u5408\u5206\u6790/#_1","text":"\u53ef\u81ea\u884c\u914d\u7f6e\u98ce\u683c\u56e0\u5b50\uff0c\u8fd9\u91cc\u4ec5\u4ee5\u5e02\u503c\u3001\u53cd\u8f6c\u7b49\u56e0\u5b50\u4f5c\u4e3a\u98ce\u683c\u56e0\u5b50\u793a\u4f8b\u51fd\u6570\u7528\u6cd5 class style_analysis(object): def __init__(self,styles = ['mkv','roc60','PE','PB','roe']): self.styles = styles def update_style(self): ss = {} for i in self.styles: print(i) ss[i] = read_hdf5_base(i) if i == 'mkv': ss[i] = ss[i].applymap(lambda x:math.log(x,math.e)) ss[i] = median_clean(ss[i]) self.ss = ss def cal_style_exposure(self,holdings): s = {} for i in sorted(holdings[0].keys()): h = holdings[0][i] style = [self.ss[n][i] for n in self.styles] style = pd.DataFrame(style,index = self.styles).T s[i] = style[style.index.isin(h)].mean() return pd.DataFrame(s) #\u52a0\u8f7d\u98ce\u683c\u56e0\u5b50\u6570\u636e\uff0c\u9700\u8981\u8fdb\u884c\u6807\u51c6\u5316\uff0c\u5efa\u8bae\u9884\u50a8\u5b58\u6807\u51c6\u5316\u56e0\u5b50\u6570\u636e sp = mf.style_analysis() sp.update_style() ILLIQ = mf.read_hdf5_base('ILLIQ') r = mf.run(ILLIQ,period=10,fees=0.002,positions=100) exposure = sp.cal_style_exposure(r[1])","title":"\u98ce\u683c\u66b4\u9732\u5206\u6790"},{"location":"\u7ec4\u5408\u5206\u6790/#_2","text":"...","title":"\u6536\u76ca\u5f52\u56e0"}]}